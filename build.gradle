buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.yaml:snakeyaml:2.4'
	}
}

plugins {
	id 'java'
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven { url 'https://maven.fabricmc.net/' } // Fabric repository for dependencies
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"block4block-mod" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	// Run configurations
	runs {
		client {
			runDir = "run"
		}
		server {
			runDir = "run"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation 'org.yaml:snakeyaml:2.4'
	include "org.yaml:snakeyaml:2.4"
}

processResources {
	inputs.property "version", project.version

	from('src/main/resources') {
		include 'block_lists.yml'
		include 'config.yml'
		duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	}

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
	from('src/client/resources') {
		include 'block4block-mod.client.mixins.json'
		into 'resources' // Copy to the resources directory in the JAR
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
	it.options.compilerArgs += ["-Xlint:unchecked"]
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName
	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}" }
	}
	from(sourceSets.client.output.classesDirs) {
		into "hasjamon/block4block/mixin/client"
	}
}

// --- Task to Download Remote Config and Generate Resource Files ---
tasks.register('downloadAndFillResourceFiles') {
	doLast {
		println "Downloading remote config.yml from GitHub..."

		// URL of the remote config file on GitHub
		def configUrl = 'https://raw.githubusercontent.com/Block4Block/Block4Block/master/src/main/resources/config.yml'

		try {
			// Download and parse the remote YAML
			def remoteYaml = new org.yaml.snakeyaml.Yaml()
			def remoteConfig = remoteYaml.load(new URL(configUrl).openStream())

			// Default config if remote config doesn't have display settings
			def defaultDisplay = [
					'useAdvancedTooltip': true,
					'useLore': false,
					'blockForBlockText': "§cBlock for Block",
					'freeToBreakText': "§aFree to Break",
					'freeInClaimsText': "§bFree in Claims"
			]

			// Use the default config if no display is found in the remote config
			def displayConfig = remoteConfig?.display ?: defaultDisplay
			def config = [display: displayConfig]

			// File path for the generated config.yml
			def configFilePath = 'src/main/resources/config.yml'

			// Call Java method to generate YAML
			com.example.block4block.YamlHelper.generateConfigYaml(config, configFilePath)

			println "Generated config.yml in resources from remote config."

		} catch (Exception e) {
			println "Error downloading or processing the remote config.yml: ${e.message}"
		}
	}
}

// Ensure the resource files are generated before processing resources and creating the source JAR.
processResources.dependsOn downloadAndFillResourceFiles
tasks.named("sourcesJar") {
	dependsOn(downloadAndFillResourceFiles)
}
build.dependsOn(downloadAndFillResourceFiles)