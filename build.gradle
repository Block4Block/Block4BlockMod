import org.yaml.snakeyaml.DumperOptions

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.yaml:snakeyaml:2.4'
	}
}

plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven { url 'https://maven.fabricmc.net/' } // Fabric repository for dependencies
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"block4block-mod" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	// Run configurations
	runs {
		client {
			runDir = "run"
		}
		server {
			runDir = "run"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	implementation 'org.yaml:snakeyaml:2.4'
}

processResources {
	inputs.property "version", project.version

	from('src/main/resources') {
		include 'block_lists.yml'
		include 'config.yml'
		duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	}

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
	it.options.compilerArgs += ["-Xlint:unchecked"]
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName
	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}" }
	}
}

// --- Task to Download Remote Config and Generate Resource Files ---
tasks.register('downloadAndFillResourceFiles') {
	doLast {
		println "Downloading remote config.yml from GitHub..."

		// URL of the remote config file on GitHub
		def configUrl = 'https://raw.githubusercontent.com/Block4Block/Block4Block/master/src/main/resources/config.yml'
		def remoteYaml = new org.yaml.snakeyaml.Yaml()
		def remoteConfig = remoteYaml.load(new URL(configUrl).openStream())

		// Configure DumperOptions for pretty YAML output
		def options = new DumperOptions()
		options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK)
		options.setPrettyFlow(true)
		def yamlDumper = new org.yaml.snakeyaml.Yaml(options)

		// Use the src/main/resources directory for generated resource files
		def resourcesDir = file('src/main/resources')
		resourcesDir.mkdirs()

		// Step 1: Generate config.yml using the display settings from the remote config (or defaults)
		def configFile = new File(resourcesDir, 'config.yml')
		if (remoteConfig?.display) {
			configFile.withWriter('UTF-8') { writer ->
				yamlDumper.dump([display: remoteConfig.display], writer)
			}
			println "Generated config.yml in resources from remote config."
		} else {
			// If remote config doesn't have display settings, use defaults
			def defaultDisplay = [
					'useAdvancedTooltip': true,
					'useLore': false,
					'blockForBlockText': "§cBlock for Block",
					'freeToBreakText': "§aFree to Break",
					'freeInClaimsText': "§bFree in Claims"
			]
			configFile.withWriter('UTF-8') { writer ->
				yamlDumper.dump([display: defaultDisplay], writer)
			}
			println "Generated default config.yml in resources."
		}

		// Helper closure to process block IDs
		def processBlockList = { list ->
			list.collect { String id ->
				def processed = id.toLowerCase()
				if (!processed.contains(':')) {
					processed = "minecraft:" + processed
				}
				return processed
			}
		}

		// Step 2: Generate block_lists.yml using processed block list entries from the remote config
		def rawClaimBlocks = remoteConfig?.get('blacklisted-claim-blocks') ?: []
		def rawBreakBlocks = remoteConfig?.get('blacklisted-blocks') ?: []
		def blockLists = [
				'blacklisted-claim-blocks': processBlockList(rawClaimBlocks),
				'blacklisted-blocks': processBlockList(rawBreakBlocks)
		]
		def blockListsFile = new File(resourcesDir, 'block_lists.yml')
		blockListsFile.withWriter('UTF-8') { writer ->
			yamlDumper.dump(blockLists, writer)
		}
		println "Generated block_lists.yml in resources from remote config."
	}
}


// Ensure the resource files are generated before processing resources and creating the source JAR.
processResources.dependsOn downloadAndFillResourceFiles
tasks.named("sourcesJar") {
	dependsOn(downloadAndFillResourceFiles)
}
build.dependsOn(downloadAndFillResourceFiles)
