import org.yaml.snakeyaml.DumperOptions

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.yaml:snakeyaml:2.4'
	}
}

plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"block4block-mod" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	// Run configurations
	runs {
		client {
			runDir = "run"
		}
		server {
			runDir = "run"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Include SnakeYAML as a runtime dependency
	include 'org.yaml:snakeyaml:2.4'
	implementation 'org.yaml:snakeyaml:2.4'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
	it.options.compilerArgs += ["-Xlint:unchecked"]
}

java {
	// Configure the sources JAR
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}" }
	}
}

// --- Custom Task to create run/config files ---
task generateRunConfigs {
	// Create run config directory
	def runConfigDir = file('run/config')
	def runBlockListsFile = file('run/config/block_lists.yml')
	def runConfigFile = file('run/config/config.yml')

	outputs.files(runBlockListsFile, runConfigFile)

	doLast {
		println "Generating config files in run/config directory..."

		// Ensure run/config directory exists
		runConfigDir.mkdirs()

		// Create dumper options for cleaner YAML output
		def options = new DumperOptions()
		options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK)
		options.setPrettyFlow(true)
		def yamlDumper = new org.yaml.snakeyaml.Yaml(options)

		// Step 1: Create block_lists.yml with empty lists
		def blockLists = [
				'blacklisted-claim-blocks': [],
				'blacklisted-blocks': []
		]

		// Write to run/config directory
		runBlockListsFile.withWriter('UTF-8') { writer ->
			yamlDumper.dump(blockLists, writer)
		}
		println "Generated block_lists.yml in run/config directory"

		// Step 2: Create config.yml with display settings
		def config = [
				'display': [
						'useAdvancedTooltip': true,
						'useLore': false,
						'blockForBlockText': "§cBlock for Block",
						'freeToBreakText': "§aFree to Break",
						'freeInClaimsText': "§bFree in Claims"
				]
		]

		// Write to run/config directory
		runConfigFile.withWriter('UTF-8') { writer ->
			yamlDumper.dump(config, writer)
		}
		println "Generated config.yml in run/config directory"
	}
}

// --- Task to create source resource files ---
task generateResourceFiles {
	def configDir = file('src/main/resources')
	def blockListsFile = file('src/main/resources/block_lists.yml')
	def configFile = file('src/main/resources/config.yml')

	outputs.files(blockListsFile, configFile)

	doLast {
		println "Generating config files in resources directory..."

		// Ensure resources directory exists
		configDir.mkdirs()

		// Create dumper options for cleaner YAML output
		def options = new DumperOptions()
		options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK)
		options.setPrettyFlow(true)
		def yamlDumper = new org.yaml.snakeyaml.Yaml(options)

		// Step 1: Create block_lists.yml with empty lists
		def blockLists = [
				'blacklisted-claim-blocks': [],
				'blacklisted-blocks': []
		]

		// Write to resources directory
		blockListsFile.withWriter('UTF-8') { writer ->
			yamlDumper.dump(blockLists, writer)
		}
		println "Generated block_lists.yml in resources directory"

		// Step 2: Create config.yml with display settings
		def config = [
				'display': [
						'useAdvancedTooltip': true,
						'useLore': false,
						'blockForBlockText': "§cBlock for Block",
						'freeToBreakText': "§aFree to Break",
						'freeInClaimsText': "§bFree in Claims"
				]
		]

		// Write to resources directory
		configFile.withWriter('UTF-8') { writer ->
			yamlDumper.dump(config, writer)
		}
		println "Generated config.yml in resources directory"
	}
}

// Make sure resource files are generated before processing resources
processResources.dependsOn generateResourceFiles

// Make sure the run configs are generated before running the client
tasks.named("runClient").configure {
	dependsOn(generateRunConfigs)
}

// Fix the sourcesJar task to work properly with generated resources
tasks.named("sourcesJar").configure {
	dependsOn(generateResourceFiles)

	// Set duplicate handling strategy
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	// Only include Java source files, not resources
	from(sourceSets.main.allJava)
	from(sourceSets.client.allJava)
}